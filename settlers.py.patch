# Patch generated by Pyment v0.3.2

--- a/settlers.py
+++ b/settlers.py
@@ -29,6 +29,7 @@
 """
 
 class Node:
+    """ """
     def __init__(self, id, claimed = False, iscity = False):
         self.id = id
         self.resource = []
@@ -38,6 +39,11 @@
     
     def claim(self, color):   #Need to only allow if certain color is other one
         if canclaim(self, color) == True:
+        """
+
+        :param color: 
+
+        """
             self.claimed = True
             self.claimedby = color
             for i in playerlist:
@@ -55,6 +61,11 @@
         
     
     def claimbypass(self, color):
+        """
+
+        :param color: 
+
+        """
         self.claimed = True
         self.claimedby = color
         for i in playerlist:
@@ -69,6 +80,11 @@
                     P4.vp += 1
     
     def makecity(self, color):
+        """
+
+        :param color: 
+
+        """
         if cancity(self, color) == True:
             self.iscity = True 
             for i in playerlist:
@@ -83,12 +99,18 @@
                         P4.vp += 1
             
 class Road:
+    """ """
     def __init__(self, nodes = []):
         self.claimed = False
         self.nodes = []
         self.claimedby = ""
     
     def claim(self, color):
+        """
+
+        :param color: 
+
+        """
         if canclaimroad(self, color) == True:
             self.claimed = True
             self.claimedby = color
@@ -96,10 +118,16 @@
             print("Can't claim")
 
     def claimbypass(self, color):
+        """
+
+        :param color: 
+
+        """
         self.claimed = True
         self.claimedby = color
             
 class Cluster:
+    """ """
     def __init__(self, isrobber = False):
         self.id = ""        
         self.resource = ""
@@ -109,6 +137,7 @@
         self.trigger = 0
         
 def roller():
+    """ """
     global trigger
     trigger = random.choice([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
 
@@ -324,6 +353,7 @@
 nodedict = {1 : Nodes[0], 2 : Nodes[1], 3 : Nodes[2], 4 : Nodes[3], 5 : Nodes[4], 6 : Nodes[5], 7 : Nodes[6], 8 : Nodes[7], 9 : Nodes[8], 10 : Nodes[9], 11 : Nodes[10], 12 : Nodes[11], 13 : Nodes[12], 14 : Nodes[13], 15 : Nodes[14], 16 : Nodes[15], 17 : Nodes[16], 18 : Nodes[17], 19 : Nodes[18], 20 : Nodes[19], 21 : Nodes[20], 22 : Nodes[21], 23 : Nodes[22], 24 : Nodes[23], 25 : Nodes[24], 26 : Nodes[25], 27 : Nodes[26], 28 : Nodes[27], 29 : Nodes[28], 30 : Nodes[29], 31 : Nodes[30], 32 : Nodes[31], 33 : Nodes[32], 34 : Nodes[33], 35 : Nodes[34], 36 : Nodes[35], 37 : Nodes[36], 38 : Nodes[37], 39 : Nodes[38], 40 : Nodes[39], 41 : Nodes[40], 42 : Nodes[41], 43 : Nodes[42], 44 : Nodes[43], 45 : Nodes[44], 46 : Nodes[45], 47 : Nodes[46], 48 : Nodes[47], 49 : Nodes[48], 50 : Nodes[49], 51 : Nodes[50], 52 : Nodes[51], 53 : Nodes[52], 54 : Nodes[53]}       
 roaddict = {0 : road0, 1 : road1, 2 : road2, 3 : road3, 4 : road4, 5 : road5, 6 : road6, 7 : road7, 8 : road8, 9 : road9, 10 : road10, 11 : road11, 12 : road12, 13 : road13, 14 : road14, 15 : road15, 16 : road16, 17 : road17, 18 : road18, 19 : road19, 20 : road20, 21 : road21, 22 : road22, 23 : road23, 24 : road24, 25 : road25, 26 : road26, 27 : road27, 28 : road28, 29 : road29, 30 : road30, 31 : road31, 32 : road32, 33 : road33, 34 : road34, 35 : road35, 36 : road36, 37 : road37, 38 : road38, 39 : road39, 40 : road40, 41 : road41, 42 : road42, 43 : road43, 44 : road44, 45 : road45, 46 : road46, 47 : road47, 48 : road48, 49 : road49, 50 : road50, 51 : road51, 52 : road52, 53 : road53, 54 : road54, 55 : road55, 56 : road56, 57 : road57, 58 : road58, 59 : road59, 60 : road60, 61 : road61, 62 : road62, 63 : road63, 64 : road64, 65 : road65, 66 : road66, 67 : road67, 68 : road68, 69 : road69, 70 : road70, 71 : road71}
 class Player:
+    """ """
     def __init__(self, name, color, position):
         self.name = name
         self.color = color
@@ -342,6 +372,18 @@
         self.vp = 0
         
     def trade(self, r1, r2, r3, r4, amount1, amount2, amount3, amount4):
+        """
+
+        :param r1: 
+        :param r2: 
+        :param r3: 
+        :param r4: 
+        :param amount1: 
+        :param amount2: 
+        :param amount3: 
+        :param amount4: 
+
+        """
         if amount3 == 0 and amount4 == 0:
             print(self.name, "Wishes to trade ", amount1, r1, "for", amount2, r2, ", Does any player wish to accept?")
         else:
@@ -369,11 +411,18 @@
 
     
     def KnightsToVictory(self, knights, vp):
+        """
+
+        :param knights: 
+        :param vp: 
+
+        """
         if self.knights == 3:
             self.vp += 2
         
         
     def payoff(self):
+        """ """
         for cluster in clusters:
             if cluster.trigger == trigger:
                 if cluster.resource == "ham":
@@ -389,24 +438,45 @@
     
     def claimnode(self, node): # Needs finishing
         for loopnode in Nodes:
+        """
+
+        :param node: 
+
+        """
             if loopnode == node:
                 loopnode.claim(self.color)
     
     def claimroad(self, road):
+        """
+
+        :param road: 
+
+        """
         for looproad in Roads:
             if looproad == road:
                 looproad.claim(self.color)
             
     def makepapa(self, node):
+        """
+
+        :param node: 
+
+        """
         for peyton in Nodes:
             if peyton == node:
                 peyton.makecity(self.color)
 
 class Devcard:
+    """ """
     def __init__(self, variant):
         self.variant = variant 
         
     def monopoly(self, color):
+        """
+
+        :param color: 
+
+        """
         global playerlist
         if self.variant == "monopoly":
             colors = []
@@ -429,6 +499,11 @@
                     i.resources[input1] += total
                     
     def vp(self, color):
+        """
+
+        :param color: 
+
+        """
         global playerlist
         if self.variant == "vp":
             for i in playerlist:
@@ -436,6 +511,7 @@
                     i.vp += 1
 
     def knight(self):
+        """ """
         if self.variant == "knight":
             hamburglar_newloc = int(input("Where would you like to move the hamburglar?"))
             relevant_var = hamburglar_newloc - 1
@@ -454,6 +530,11 @@
                                         Player.knights += 1
                                         
     def roadbuilding(self, color):
+        """
+
+        :param color: 
+
+        """
         global playerlist
         input1 = int(input("Where would you like to put your first road? "))
         input2 = int(input("Where would you like to put your second road? "))
@@ -468,6 +549,7 @@
                                         
 
 def play():
+    """ """
     global numplayers
     input1 = input("How Many Players?:   ")
     numplayers = input1
@@ -482,6 +564,7 @@
 playerlist = []      
 
 def makelist():
+    """ """
     global playerlist
     if numplayers == 3:
         playerlist = [P1, P2, P3]
@@ -491,6 +574,7 @@
         playerlist = [P1, P2, P3, P4]      
     
 def init():
+    """ """
     global P1
     global P2
     global P3
@@ -517,6 +601,11 @@
         playerdict1 = {1 : P1, 2 : P2}
     
 def playerinput(string):
+    """
+
+    :param string: 
+
+    """
     global playernames
     global colors
     if int(string) == 1:
@@ -539,6 +628,7 @@
 usedResources = []
 
 def InitialHexResourceRandomizer():
+    """ """
     global desert_loc
     while len(usedResources) < 19:            
         ResourceGenVar = random.choice(["ham", "pineapple", "cheese", "sauce", "bread", "desert"])
@@ -594,6 +684,7 @@
 ClustersForMapping = [Cluster1, Cluster2, Cluster3, Cluster4, Cluster5, Cluster6, Cluster7, Cluster8, Cluster9, Cluster10, Cluster11, Cluster12, Cluster13, Cluster14, Cluster15, Cluster16, Cluster17, Cluster18, Cluster19]
 
 def InitialHexTriggerRandomizer():
+    """ """
     while len(usedID) < 18:          
         IDGenVar = int(random.choice([2, 3, 4, 5, 6, 8, 9, 10, 11, 12]))
         if IDGenVar == 2:
@@ -685,6 +776,12 @@
 """
 
 def isNeighbor(point1, point2):
+    """
+
+    :param point1: 
+    :param point2: 
+
+    """
     for road in Roads:
         if [point1, point2] == road.nodes:
             return True
@@ -692,6 +789,7 @@
             return True
     
 def ClusterToNode():
+    """ """
     global robber_loc
     for cluster in clusters:
         for road in cluster.roads:
@@ -721,6 +819,12 @@
             node.resource = temp
                
 def canclaimroad(roadr, color):
+    """
+
+    :param roadr: 
+    :param color: 
+
+    """
     a = False
     for roads in Roads:
         if roads.claimed == True and roads.claimedby == color:
@@ -731,6 +835,12 @@
     return a
     
 def canclaim(noder, color):
+    """
+
+    :param noder: 
+    :param color: 
+
+    """
     colors = ['red', 'blue', 'white', 'orange', 'green', 'brown']
     colors.remove(color)
     a = False
@@ -745,6 +855,12 @@
     return a
                 
 def cancity(noder, color):
+    """
+
+    :param noder: 
+    :param color: 
+
+    """
     if noder.claimedby == color:
         return True
     else:
@@ -756,6 +872,7 @@
     print("\n Choices: \n Road (1 Pineapple, 1 Cheese) \n Pizza Hut (1 Bread, 1 Cheese, 1 Pineapple, 1 Sauce) \n Papa Johns (3 Ham, 2 Bread) \n  ")
     input2 = input("What would you like to construct?    ")
     if input2 == "Pizza Hut":
+    """ """
         input3 = input("Where would you like to to place this?  ")
         if turn == 1:
             if P1.resources['bread'] >= 1 and P1.resources['cheese'] >= 1 and P1.resources['pineapple'] >= 1 and P1.resources['sauce'] >= 1:
@@ -867,6 +984,7 @@
                 build()
 
 def trade():
+    """ """
     global turn
     input5 = ""
     input6 = ""
@@ -907,12 +1025,22 @@
             P4.trade(int(input7), int(input8), "pineapple", "ham", 0, 0)
 
 def validresource(a):
+    """
+
+    :param a: 
+
+    """
     if a.lower() == "ham" or a.lower() == "pineapple" or a.lower() == "sauce" or a.lower() == "bread" or  a.lower() == "cheese":
         return True
     else:
         return False
 
 def initialize(n):
+    """
+
+    :param n: 
+
+    """
     if n == 1:
         input4 = input("Please place your first settlement, " + playerdict[n].name + ":   ")
         while nodedict[int(input4)].claimedby != playerdict[n].color:
@@ -946,6 +1074,11 @@
         initialize(n-1)
         
 def initializepart2(n):
+    """
+
+    :param n: 
+
+    """
     if n == 1:
         input4 = input("Please place your second settlement, " + playerdict1[n].name + ":   ")
         while nodedict[int(input4)].claimedby != playerdict1[n].color:
@@ -979,6 +1112,11 @@
         initializepart2(n-1)
       
 def howmanynodes(color):
+    """
+
+    :param color: 
+
+    """
     a = 0
     for node in Nodes:
         if node.claimedby == color:
@@ -986,11 +1124,13 @@
     return a
             
 def haswon():
+    """ """
     for i in playerlist:
         if i.vp == 10:
             print("Congratulations, " + i.name + "!!! You have just won the game!")            
             
 def hamburglar():
+    """ """
     if cluster.isrobber == True:
         cluster.tempresource = clusters.resource
         cluster.resource = ""
@@ -999,6 +1139,7 @@
             cluster.resource = clusters.tempresource            
 
 def move_hamburglar():
+    """ """
     if trigger == 7:
         hamburglar_newloc = int(input("Where would you like to move the hamburglar?"))
         relevant_var = hamburglar_newloc - 1
@@ -1006,6 +1147,7 @@
         clusters[relevant_var].isrobber = True
         
 def turns():
+    """ """
     global turn
     roller()
     for place, obj in playerdict1.items():
@@ -1031,6 +1173,7 @@
 turns()
 
 def debugbypass():
+    """ """
     global P1
     global P2
     global P3
